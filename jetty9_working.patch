diff --git a/lang/java/ipc/pom.xml b/lang/java/ipc/pom.xml
index 186967f..75084a1 100644
--- a/lang/java/ipc/pom.xml
+++ b/lang/java/ipc/pom.xml
@@ -40,7 +40,7 @@
       org.apache.avro*;version="${project.version}",
       org.jboss.netty*,
       javax.servlet*;resolution:=optional,
-      org.mortbay*;resolution:=optional,
+      org.eclipse*;resolution:=optional,
       org.apache.velocity*;resolution:=optional,
       *
     </osgi.import>
@@ -125,11 +125,12 @@
       <version>${jackson.version}</version>
     </dependency>
     <dependency>
-      <groupId>org.mortbay.jetty</groupId>
-      <artifactId>jetty</artifactId>
+      <groupId>org.eclipse.jetty</groupId>
+      <artifactId>jetty-server</artifactId>
+      <version>${jetty.version}</version>
     </dependency>
     <dependency>
-      <groupId>org.mortbay.jetty</groupId>
+      <groupId>org.eclipse.jetty</groupId>
       <artifactId>jetty-util</artifactId>
       <version>${jetty.version}</version>
     </dependency>
@@ -142,8 +143,8 @@
       <artifactId>velocity</artifactId>
     </dependency>
     <dependency>
-      <groupId>org.mortbay.jetty</groupId>
-      <artifactId>servlet-api</artifactId>
+      <groupId>org.eclipse.jetty</groupId>
+      <artifactId>jetty-servlet</artifactId>
       <version>${jetty-servlet-api.version}</version>
     </dependency>
 
diff --git a/lang/java/ipc/src/main/java/org/apache/avro/ipc/HttpServer.java b/lang/java/ipc/src/main/java/org/apache/avro/ipc/HttpServer.java
index be6bbb2..548e76c 100644
--- a/lang/java/ipc/src/main/java/org/apache/avro/ipc/HttpServer.java
+++ b/lang/java/ipc/src/main/java/org/apache/avro/ipc/HttpServer.java
@@ -22,14 +22,14 @@ import java.io.IOException;
 
 import org.apache.avro.AvroRuntimeException;
 
-import org.mortbay.jetty.Connector;
-import org.mortbay.jetty.nio.SelectChannelConnector;
-import org.mortbay.jetty.servlet.Context;
-import org.mortbay.jetty.servlet.ServletHolder;
+import org.eclipse.jetty.server.Connector;
+import org.eclipse.jetty.server.ServerConnector;
+import org.eclipse.jetty.servlet.ServletContextHandler;
+import org.eclipse.jetty.servlet.ServletHolder;
 
 /** An HTTP-based RPC {@link Server}. */
 public class HttpServer implements Server {
-  private org.mortbay.jetty.Server server;
+  private org.eclipse.jetty.server.Server server;
 
   /** Constructs a server to run on the named port. */
   public HttpServer(Responder responder, int port) throws IOException {
@@ -48,18 +48,17 @@ public class HttpServer implements Server {
 
   /** Constructs a server to run on the named port on the specified address. */
   public HttpServer(ResponderServlet servlet, String bindAddress, int port) throws IOException {
-    this.server = new org.mortbay.jetty.Server();
-    SelectChannelConnector connector = new SelectChannelConnector();
-    connector.setLowResourceMaxIdleTime(10000);
+    this.server = new org.eclipse.jetty.server.Server();
+    ServerConnector connector = new ServerConnector(server);
+    connector.setIdleTimeout(10000);
     connector.setAcceptQueueSize(128);
-    connector.setResolveNames(false);
-    connector.setUseDirectBuffers(false);
+    //connector.setResolveNames(false);//this is supposed to be obsolete
     if (bindAddress != null) {
       connector.setHost(bindAddress);
     }
     connector.setPort(port);
     server.addConnector(connector);
-    new Context(server, "/").addServlet(new ServletHolder(servlet), "/*");
+    new ServletContextHandler(server, "/").addServlet(new ServletHolder(servlet), "/*");
   }
 
   /** Constructs a server to run with the given connector. */
@@ -69,9 +68,9 @@ public class HttpServer implements Server {
 
   /** Constructs a server to run with the given connector. */
   public HttpServer(ResponderServlet servlet, Connector connector) throws IOException {
-    this.server = new org.mortbay.jetty.Server();
+    this.server = connector.getServer();
     server.addConnector(connector);
-    new Context(server, "/").addServlet(new ServletHolder(servlet), "/*");
+    new ServletContextHandler(server, "/").addServlet(new ServletHolder(servlet), "/*");
   }
 
   public void addConnector(Connector connector) {
@@ -79,7 +78,7 @@ public class HttpServer implements Server {
   }
 
   @Override
-  public int getPort() { return server.getConnectors()[0].getLocalPort(); }
+  public int getPort() {  return ((ServerConnector)(server.getConnectors()[0])).getLocalPort(); }
 
   @Override
   public void close() {
diff --git a/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StaticServlet.java b/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StaticServlet.java
index 88a50f8..67f71ef 100644
--- a/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StaticServlet.java
+++ b/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StaticServlet.java
@@ -7,7 +7,7 @@
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -18,11 +18,10 @@
 
 package org.apache.avro.ipc.stats;
 
-import java.io.IOException;
 import java.net.URL;
 
-import org.mortbay.jetty.servlet.DefaultServlet;
-import org.mortbay.resource.Resource;
+import org.eclipse.jetty.servlet.DefaultServlet;
+import org.eclipse.jetty.util.resource.Resource;
 
 /**
  * Very simple servlet class capable of serving static files.
@@ -32,15 +31,13 @@ public class StaticServlet extends DefaultServlet {
     // Take only last slice of the URL as a filename, so we can adjust path.
     // This also prevents mischief like '../../foo.css'
     String[] parts = pathInContext.split("/");
-    String filename =  parts[parts.length - 1];
+    String filename = parts[parts.length - 1];
 
-    try {
-      URL resource = getClass().getClassLoader().getResource(
-          "org/apache/avro/ipc/stats/static/" + filename);
-      if (resource == null) { return null; }
-      return Resource.newResource(resource);
-    } catch (IOException e) {
+    URL resource = getClass().getClassLoader().getResource(
+      "org/apache/avro/ipc/stats/static/" + filename);
+    if (resource == null) {
       return null;
     }
+    return Resource.newResource(resource);
   }
 }
diff --git a/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsServer.java b/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsServer.java
index 1b2e54b..3339130 100644
--- a/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsServer.java
+++ b/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsServer.java
@@ -16,9 +16,9 @@ package org.apache.avro.ipc.stats;
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-import org.mortbay.jetty.Server;
-import org.mortbay.jetty.servlet.Context;
-import org.mortbay.jetty.servlet.ServletHolder;
+import org.eclipse.jetty.server.Server;
+import org.eclipse.jetty.servlet.ServletContextHandler;
+import org.eclipse.jetty.servlet.ServletHolder;
 
 /* This is a server that displays live information from a StatsPlugin.
  *
@@ -38,10 +38,10 @@ public class StatsServer {
     this.httpServer = new Server(port);
     this.plugin = plugin;
 
-    Context staticContext = new Context(httpServer, "/static");
+    ServletContextHandler staticContext = new ServletContextHandler(httpServer, "/static");
     staticContext.addServlet(new ServletHolder(new StaticServlet()), "/");
 
-    Context context = new Context(httpServer, "/");
+    ServletContextHandler context = new ServletContextHandler(httpServer, "/");
     context.addServlet(new ServletHolder(new StatsServlet(plugin)), "/");
 
     httpServer.start();
diff --git a/lang/java/ipc/src/test/java/org/apache/avro/TestProtocolHttps.java b/lang/java/ipc/src/test/java/org/apache/avro/TestProtocolHttps.java
index f770dae..53b5d78 100644
--- a/lang/java/ipc/src/test/java/org/apache/avro/TestProtocolHttps.java
+++ b/lang/java/ipc/src/test/java/org/apache/avro/TestProtocolHttps.java
@@ -17,27 +17,22 @@
  */
 package org.apache.avro;
 
-import org.apache.avro.Schema;
-import org.apache.avro.Schema.Field;
 import org.apache.avro.ipc.Server;
 import org.apache.avro.ipc.Transceiver;
 import org.apache.avro.ipc.Responder;
 import org.apache.avro.ipc.HttpServer;
 import org.apache.avro.ipc.HttpTransceiver;
-import org.apache.avro.ipc.generic.GenericRequestor;
-import org.apache.avro.ipc.specific.SpecificRequestor;
-import org.apache.avro.generic.GenericData;
-import org.apache.avro.test.Simple;
 
-import org.junit.Test;
 
-import org.mortbay.jetty.security.SslSocketConnector;
+import org.eclipse.jetty.http.HttpVersion;
+import org.eclipse.jetty.server.HttpConfiguration;
+import org.eclipse.jetty.server.HttpConnectionFactory;
+import org.eclipse.jetty.server.SecureRequestCustomizer;
+import org.eclipse.jetty.server.ServerConnector;
+import org.eclipse.jetty.server.SslConnectionFactory;
+import org.eclipse.jetty.util.ssl.SslContextFactory;
 
 import java.net.URL;
-import java.net.ServerSocket;
-import java.net.SocketTimeoutException;
-import java.lang.reflect.UndeclaredThrowableException;
-import java.util.ArrayList;
 
 public class TestProtocolHttps extends TestProtocolSpecific {
 
@@ -48,14 +43,30 @@ public class TestProtocolHttps extends TestProtocolSpecific {
     System.setProperty("javax.net.ssl.password", "avrotest");
     System.setProperty("javax.net.ssl.trustStore", "src/test/truststore");
     System.setProperty("javax.net.ssl.trustStorePassword", "avrotest");
-    SslSocketConnector connector = new SslSocketConnector();
-    connector.setPort(18443);
-    connector.setKeystore(System.getProperty("javax.net.ssl.keyStore"));
-    connector.setPassword(System.getProperty("javax.net.ssl.password"));
-    connector.setKeyPassword(System.getProperty("javax.net.ssl.keyStorePassword"));
-    connector.setHost("localhost");
-    connector.setNeedClientAuth(false);
-    return new HttpServer(testResponder, connector);
+
+    org.eclipse.jetty.server.Server srv = new org.eclipse.jetty.server.Server();
+
+    SslContextFactory sslContextFactory = new SslContextFactory();
+    sslContextFactory.setKeyStorePath(System.getProperty("javax.net.ssl.keyStore"));
+    sslContextFactory.setKeyStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));
+    sslContextFactory.setKeyManagerPassword( System.getProperty("javax.net.ssl.password"));
+    sslContextFactory.setTrustStorePath(System.getProperty("javax.net.ssl.trustStore"));
+    sslContextFactory.setTrustStorePassword(System.getProperty("javax.net.ssl.trustStorePassword"));
+
+    HttpConfiguration http_config = new HttpConfiguration();
+    http_config.setSecureScheme("https");
+    http_config.setSecurePort(18443);
+
+    HttpConfiguration https_config = new HttpConfiguration(http_config);
+    https_config.addCustomizer(new SecureRequestCustomizer());
+
+    ServerConnector sslConnector = new ServerConnector(srv,
+      new SslConnectionFactory(sslContextFactory, HttpVersion.HTTP_1_1.asString()),
+      new HttpConnectionFactory(https_config));
+    sslConnector.setPort(18443);
+    sslConnector.setHost("localhost");
+
+    return new HttpServer(testResponder, sslConnector);
   }
 
   @Override
diff --git a/lang/java/ipc/src/test/java/org/apache/avro/ipc/stats/TestStatsPluginAndServlet.java b/lang/java/ipc/src/test/java/org/apache/avro/ipc/stats/TestStatsPluginAndServlet.java
index c0f9664..b445c97 100644
--- a/lang/java/ipc/src/test/java/org/apache/avro/ipc/stats/TestStatsPluginAndServlet.java
+++ b/lang/java/ipc/src/test/java/org/apache/avro/ipc/stats/TestStatsPluginAndServlet.java
@@ -41,8 +41,9 @@ import org.apache.avro.ipc.Responder;
 import org.apache.avro.ipc.Transceiver;
 import org.apache.avro.ipc.generic.GenericRequestor;
 import org.apache.avro.ipc.generic.GenericResponder;
+import org.eclipse.jetty.util.log.Log;
 import org.junit.Test;
-import org.mortbay.log.Log;
+import org.eclipse.jetty.util.log.Slf4jLog;
 
 public class TestStatsPluginAndServlet {
   Protocol protocol = Protocol.parse("" + "{\"protocol\": \"Minimal\", "
@@ -187,7 +188,7 @@ public class TestStatsPluginAndServlet {
         + "   \"request\": [{\"name\": \"millis\", \"type\": \"long\"}," +
           "{\"name\": \"data\", \"type\": \"bytes\"}], "
         + "   \"response\": \"null\"} } }");
-    Log.info("Using protocol: " + protocol.toString());
+    Log.getLog().info("Using protocol: " + protocol.toString());
     Responder r = new SleepyResponder(protocol);
     StatsPlugin p = new StatsPlugin();
     r.addRPCPlugin(p);
diff --git a/lang/java/pom.xml b/lang/java/pom.xml
index 74e71a4..125fa18 100644
--- a/lang/java/pom.xml
+++ b/lang/java/pom.xml
@@ -45,8 +45,8 @@
     <hadoop1.version>1.2.1</hadoop1.version>
     <hadoop2.version>2.7.3</hadoop2.version>
     <jackson.version>1.9.13</jackson.version>
-    <jetty.version>6.1.26</jetty.version>
-    <jetty-servlet-api.version>2.5-20081211</jetty-servlet-api.version>
+    <jetty.version>9.4.6.v20170531</jetty.version>
+    <jetty-servlet-api.version>9.4.6.v20170531</jetty-servlet-api.version>
     <jopt-simple.version>5.0.3</jopt-simple.version>
     <junit.version>4.12</junit.version>
     <netty.version>3.10.6.Final</netty.version>
@@ -444,7 +444,7 @@
         <version>${velocity.version}</version>
       </dependency>
       <dependency>
-        <groupId>org.mortbay.jetty</groupId>
+        <groupId>org.eclipse.jetty</groupId>
         <artifactId>jetty</artifactId>
         <version>${jetty.version}</version>
       </dependency>
